# Generated by Django 4.2.16 on 2024-12-04 21:32

from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.roles
import nautobot.extras.models.statuses
import nautobot.ipam.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("dcim", "0065_optimization_initial_part_3"),
        ("ipam", "0051_optimization_initial_part_1"),
        ("tenancy", "0010_optimization_initial"),
        ("virtualization", "0001_initial"),
        ("extras", "0118_optimization_initial_part_2"),
    ]

    operations = [
        migrations.AddField(
            model_name="vrfdeviceassignment",
            name="virtual_machine",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="vrf_assignments",
                to="virtualization.virtualmachine",
            ),
        ),
        migrations.AddField(
            model_name="vrfdeviceassignment",
            name="vrf",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="device_assignments",
                to="ipam.vrf",
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="devices",
            field=models.ManyToManyField(
                related_name="vrfs",
                through="ipam.VRFDeviceAssignment",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="export_targets",
            field=models.ManyToManyField(
                blank=True, related_name="exporting_vrfs", to="ipam.routetarget"
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="import_targets",
            field=models.ManyToManyField(
                blank=True, related_name="importing_vrfs", to="ipam.routetarget"
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="namespace",
            field=models.ForeignKey(
                default=nautobot.ipam.models.get_default_namespace_pk,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vrfs",
                to="ipam.namespace",
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="prefixes",
            field=models.ManyToManyField(
                related_name="vrfs",
                through="ipam.VRFPrefixAssignment",
                to="ipam.prefix",
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.status",
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vrfs",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="vrf",
            name="virtual_machines",
            field=models.ManyToManyField(
                related_name="vrfs",
                through="ipam.VRFDeviceAssignment",
                to="virtualization.virtualmachine",
            ),
        ),
        migrations.AddField(
            model_name="vlanlocationassignment",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="vlan_assignments",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="vlanlocationassignment",
            name="vlan",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="location_assignments",
                to="ipam.vlan",
            ),
        ),
        migrations.AddField(
            model_name="vlangroup",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vlan_groups",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="vlangroup",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="vlan",
            name="locations",
            field=models.ManyToManyField(
                blank=True,
                related_name="vlans",
                through="ipam.VLANLocationAssignment",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="vlan",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="vlan",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="vlan",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="vlan",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vlans",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="vlan",
            name="vlan_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="vlans",
                to="ipam.vlangroup",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="device",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="services",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="ip_addresses",
            field=models.ManyToManyField(
                blank=True, related_name="services", to="ipam.ipaddress"
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="service",
            name="virtual_machine",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="services",
                to="virtualization.virtualmachine",
            ),
        ),
        migrations.AddField(
            model_name="routetarget",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="routetarget",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="route_targets",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="prefixlocationassignment",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="prefix_assignments",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="prefixlocationassignment",
            name="prefix",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="location_assignments",
                to="ipam.prefix",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="locations",
            field=models.ManyToManyField(
                blank=True,
                related_name="prefixes",
                through="ipam.PrefixLocationAssignment",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="namespace",
            field=models.ForeignKey(
                default=nautobot.ipam.models.get_default_namespace_pk,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="prefixes",
                to="ipam.namespace",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="children",
                to="ipam.prefix",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="rir",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="prefixes",
                to="ipam.rir",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="prefixes",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="prefix",
            name="vlan",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="prefixes",
                to="ipam.vlan",
            ),
        ),
        migrations.AddField(
            model_name="namespace",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="ipaddresstointerface",
            name="interface",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ip_address_assignments",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="ipaddresstointerface",
            name="ip_address",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interface_assignments",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="ipaddresstointerface",
            name="vm_interface",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ip_address_assignments",
                to="virtualization.vminterface",
            ),
        ),
        migrations.AddField(
            model_name="ipaddress",
            name="nat_inside",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="nat_outside_list",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="ipaddress",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="ip_addresses",
                to="ipam.prefix",
            ),
        ),
        migrations.AddField(
            model_name="ipaddress",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="ipaddress",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="ipaddress",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="ipaddress",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="ip_addresses",
                to="tenancy.tenant",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="vrfprefixassignment",
            unique_together={("vrf", "prefix")},
        ),
        migrations.AlterUniqueTogether(
            name="vrfdeviceassignment",
            unique_together={("vrf", "virtual_machine"), ("vrf", "device")},
        ),
        migrations.AlterUniqueTogether(
            name="vrf",
            unique_together={("namespace", "rd")},
        ),
        migrations.AlterUniqueTogether(
            name="vlanlocationassignment",
            unique_together={("vlan", "location")},
        ),
        migrations.AlterUniqueTogether(
            name="vlan",
            unique_together={("vlan_group", "name"), ("vlan_group", "vid")},
        ),
        migrations.AddConstraint(
            model_name="service",
            constraint=models.UniqueConstraint(
                fields=("name", "device"), name="unique_device_service_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="service",
            constraint=models.UniqueConstraint(
                fields=("name", "virtual_machine"),
                name="unique_virtual_machine_service_name",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="prefixlocationassignment",
            unique_together={("prefix", "location")},
        ),
        migrations.AlterUniqueTogether(
            name="prefix",
            unique_together={("namespace", "network", "prefix_length")},
        ),
        migrations.AlterIndexTogether(
            name="prefix",
            index_together={
                ("namespace", "network", "broadcast", "prefix_length"),
                ("network", "broadcast", "prefix_length"),
            },
        ),
        migrations.AlterUniqueTogether(
            name="ipaddresstointerface",
            unique_together={
                ("ip_address", "vm_interface"),
                ("ip_address", "interface"),
            },
        ),
        migrations.AlterUniqueTogether(
            name="ipaddress",
            unique_together={("parent", "host")},
        ),
    ]
