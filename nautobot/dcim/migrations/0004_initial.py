# Generated by Django 4.2.16 on 2024-12-04 21:32

from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.roles
import nautobot.extras.models.statuses
import nautobot.extras.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("dcim", "0003_initial"),
        ("ipam", "0002_initial"),
        ("tenancy", "0001_initial"),
        ("virtualization", "0001_initial"),
        ("extras", "0002_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.AddField(
            model_name="device",
            name="cluster",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="devices",
                to="virtualization.cluster",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="controller_managed_device_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="devices",
                to="dcim.controllermanageddevicegroup",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="device_redundancy_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="devices",
                to="dcim.deviceredundancygroup",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="device_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="local_config_context_data_owner_content_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                default=None,
                limit_choices_to=nautobot.extras.utils.FeatureQuery(
                    "config_context_owners"
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="local_config_context_schema",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="extras.configcontextschema",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="platform",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="devices",
                to="dcim.platform",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="primary_ip4",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_ip4_for",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="primary_ip6",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="primary_ip6_for",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="rack",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="dcim.rack",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.role"
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="secrets_group",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="devices",
                to="extras.secretsgroup",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="software_image_files",
            field=models.ManyToManyField(
                blank=True, related_name="devices", to="dcim.softwareimagefile"
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="software_version",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="dcim.softwareversion",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="devices",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="device",
            name="virtual_chassis",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="members",
                to="dcim.virtualchassis",
            ),
        ),
        migrations.AddField(
            model_name="controllermanageddevicegroup",
            name="controller",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="controller_managed_device_groups",
                to="dcim.controller",
            ),
        ),
        migrations.AddField(
            model_name="controllermanageddevicegroup",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="dcim.controllermanageddevicegroup",
            ),
        ),
        migrations.AddField(
            model_name="controllermanageddevicegroup",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="controller_device",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="controllers",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="controller_device_redundancy_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="controllers",
                to="dcim.deviceredundancygroup",
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="external_integration",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="controllers",
                to="extras.externalintegration",
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="controllers",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="platform",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="controllers",
                to="dcim.platform",
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="controller",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="controllers",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverporttemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverporttemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverport",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverport",
            name="_path",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dcim.cablepath",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverport",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverport",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverport",
            name="module",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="consoleserverport",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="consoleporttemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="consoleporttemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="consoleport",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="consoleport",
            name="_path",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dcim.cablepath",
            ),
        ),
        migrations.AddField(
            model_name="consoleport",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="consoleport",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="consoleport",
            name="module",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="consoleport",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="cablepath",
            name="destination_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="cablepath",
            name="origin_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="cable",
            name="_termination_a_device",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="cable",
            name="_termination_b_device",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="cable",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="cable",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="cable",
            name="termination_a_type",
            field=models.ForeignKey(
                limit_choices_to=models.Q(
                    models.Q(
                        models.Q(
                            ("app_label", "circuits"),
                            ("model__in", ("circuittermination",)),
                        ),
                        models.Q(
                            ("app_label", "dcim"),
                            (
                                "model__in",
                                (
                                    "consoleport",
                                    "consoleserverport",
                                    "frontport",
                                    "interface",
                                    "powerfeed",
                                    "poweroutlet",
                                    "powerport",
                                    "rearport",
                                ),
                            ),
                        ),
                        _connector="OR",
                    )
                ),
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="cable",
            name="termination_b_type",
            field=models.ForeignKey(
                limit_choices_to=models.Q(
                    models.Q(
                        models.Q(
                            ("app_label", "circuits"),
                            ("model__in", ("circuittermination",)),
                        ),
                        models.Q(
                            ("app_label", "dcim"),
                            (
                                "model__in",
                                (
                                    "consoleport",
                                    "consoleserverport",
                                    "frontport",
                                    "interface",
                                    "powerfeed",
                                    "poweroutlet",
                                    "powerport",
                                    "rearport",
                                ),
                            ),
                        ),
                        _connector="OR",
                    )
                ),
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="softwareversion",
            unique_together={("platform", "version")},
        ),
        migrations.AlterUniqueTogether(
            name="softwareimagefile",
            unique_together={("image_file_name", "software_version")},
        ),
        migrations.AddConstraint(
            model_name="rearporttemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_rearporttemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="rearporttemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_rearporttemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="rearport",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="dcim_rearport_device_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="rearport",
            constraint=models.UniqueConstraint(
                fields=("module", "name"), name="dcim_rearport_module_name_unique"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rackgroup",
            unique_together={("location", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="rack",
            unique_together={("rack_group", "facility_id"), ("rack_group", "name")},
        ),
        migrations.AddConstraint(
            model_name="powerporttemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_powerporttemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="powerporttemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_powerporttemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="powerport",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="dcim_powerport_device_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="powerport",
            constraint=models.UniqueConstraint(
                fields=("module", "name"), name="dcim_powerport_module_name_unique"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="powerpanel",
            unique_together={("location", "name")},
        ),
        migrations.AddConstraint(
            model_name="poweroutlettemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_poweroutlettemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="poweroutlettemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_poweroutlettemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="poweroutlet",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="dcim_poweroutlet_device_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="poweroutlet",
            constraint=models.UniqueConstraint(
                fields=("module", "name"), name="dcim_poweroutlet_module_name_unique"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="powerfeed",
            unique_together={("power_panel", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="moduletype",
            unique_together={("manufacturer", "model")},
        ),
        migrations.AddConstraint(
            model_name="modulebaytemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_modulebaytemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="modulebaytemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_modulebaytemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="modulebay",
            constraint=models.UniqueConstraint(
                fields=("parent_device", "name"),
                name="dcim_modulebay_parent_device_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="modulebay",
            constraint=models.UniqueConstraint(
                fields=("parent_module", "name"),
                name="dcim_modulebay_parent_module_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="module",
            constraint=models.UniqueConstraint(
                fields=("module_type", "serial"),
                name="dcim_module_module_type_serial_unique",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="location",
            unique_together={("parent", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="inventoryitem",
            unique_together={("device", "parent", "name")},
        ),
        migrations.AddConstraint(
            model_name="interfacetemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_interfacetemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="interfacetemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_interfacetemplate_module_type_name_unique",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="interfaceredundancygroupassociation",
            unique_together={("interface_redundancy_group", "interface")},
        ),
        migrations.AddConstraint(
            model_name="interface",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="dcim_interface_device_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="interface",
            constraint=models.UniqueConstraint(
                fields=("module", "name"), name="dcim_interface_module_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="frontporttemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_frontporttemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="frontporttemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_frontporttemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="frontporttemplate",
            constraint=models.UniqueConstraint(
                fields=("rear_port_template", "rear_port_position"),
                name="dcim_frontporttemplate_rear_port_template_position_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="frontport",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="dcim_frontport_device_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="frontport",
            constraint=models.UniqueConstraint(
                fields=("module", "name"), name="dcim_frontport_module_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="frontport",
            constraint=models.UniqueConstraint(
                fields=("rear_port", "rear_port_position"),
                name="dcim_frontport_rear_port_position_unique",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="devicetypetosoftwareimagefile",
            unique_together={("device_type", "software_image_file")},
        ),
        migrations.AlterUniqueTogether(
            name="devicetype",
            unique_together={("manufacturer", "model")},
        ),
        migrations.AlterUniqueTogether(
            name="devicebaytemplate",
            unique_together={("device_type", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="devicebay",
            unique_together={("device", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="device",
            unique_together={
                ("location", "tenant", "name"),
                ("virtual_chassis", "vc_position"),
                ("rack", "position", "face"),
            },
        ),
        migrations.AddConstraint(
            model_name="consoleserverporttemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_consoleserverporttemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleserverporttemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_consoleserverporttemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleserverport",
            constraint=models.UniqueConstraint(
                fields=("device", "name"),
                name="dcim_consoleserverport_device_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleserverport",
            constraint=models.UniqueConstraint(
                fields=("module", "name"),
                name="dcim_consoleserverport_module_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleporttemplate",
            constraint=models.UniqueConstraint(
                fields=("device_type", "name"),
                name="dcim_consoleporttemplate_device_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleporttemplate",
            constraint=models.UniqueConstraint(
                fields=("module_type", "name"),
                name="dcim_consoleporttemplate_module_type_name_unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleport",
            constraint=models.UniqueConstraint(
                fields=("device", "name"), name="dcim_consoleport_device_name_unique"
            ),
        ),
        migrations.AddConstraint(
            model_name="consoleport",
            constraint=models.UniqueConstraint(
                fields=("module", "name"), name="dcim_consoleport_module_name_unique"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="cablepath",
            unique_together={("origin_type", "origin_id")},
        ),
        migrations.AlterUniqueTogether(
            name="cable",
            unique_together={
                ("termination_a_type", "termination_a_id"),
                ("termination_b_type", "termination_b_id"),
            },
        ),
    ]
