# Generated by Django 4.2.16 on 2024-12-04 21:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import nautobot.core.models.fields
import nautobot.extras.models.roles
import nautobot.extras.models.statuses
import nautobot.extras.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("tenancy", "0010_optimization_initial"),
        ("ipam", "0051_optimization_initial_part_1"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
        ("extras", "0117_optimization_initial_part_1"),
        ("dcim", "0064_optimization_initial_part_2"),
    ]

    operations = [
        migrations.AddField(
            model_name="rackreservation",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="rack_reservations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="rackgroup",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="rack_groups",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="rackgroup",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="dcim.rackgroup",
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="racks",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="rack_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="racks",
                to="dcim.rackgroup",
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="rack",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="racks",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="powerporttemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="powerporttemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="powerport",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="powerport",
            name="_path",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dcim.cablepath",
            ),
        ),
        migrations.AddField(
            model_name="powerport",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="powerport",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="powerport",
            name="module",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="powerport",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="powerpanel",
            name="location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="power_panels",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="powerpanel",
            name="rack_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="power_panels",
                to="dcim.rackgroup",
            ),
        ),
        migrations.AddField(
            model_name="powerpanel",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="poweroutlettemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlettemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlettemplate",
            name="power_port_template",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="power_outlet_templates",
                to="dcim.powerporttemplate",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="_path",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dcim.cablepath",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="module",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="power_port",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="power_outlets",
                to="dcim.powerport",
            ),
        ),
        migrations.AddField(
            model_name="poweroutlet",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="_path",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dcim.cablepath",
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="power_panel",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="power_feeds",
                to="dcim.powerpanel",
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="rack",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="power_feeds",
                to="dcim.rack",
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="powerfeed",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="platform",
            name="manufacturer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="platforms",
                to="dcim.manufacturer",
            ),
        ),
        migrations.AddField(
            model_name="moduletype",
            name="manufacturer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="module_types",
                to="dcim.manufacturer",
            ),
        ),
        migrations.AddField(
            model_name="moduletype",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="modulebaytemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="modulebaytemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="modulebay",
            name="parent_device",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="module_bays",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="modulebay",
            name="parent_module",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="module_bays",
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="modulebay",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="location",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modules",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="module_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modules",
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="parent_module_bay",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="installed_module",
                to="dcim.modulebay",
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="module",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="modules",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="locationtype",
            name="content_types",
            field=models.ManyToManyField(
                limit_choices_to=nautobot.extras.utils.FeatureQuery("locations"),
                related_name="location_types",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="locationtype",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="dcim.locationtype",
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="location_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="locations",
                to="dcim.locationtype",
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="dcim.location",
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="location",
            name="tenant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="locations",
                to="tenancy.tenant",
            ),
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                on_delete=django.db.models.deletion.CASCADE, to="dcim.device"
            ),
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="manufacturer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="inventory_items",
                to="dcim.manufacturer",
            ),
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="dcim.inventoryitem",
            ),
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="software_image_files",
            field=models.ManyToManyField(
                blank=True, related_name="inventory_items", to="dcim.softwareimagefile"
            ),
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="software_version",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="inventory_items",
                to="dcim.softwareversion",
            ),
        ),
        migrations.AddField(
            model_name="inventoryitem",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="interfacetemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="interfacetemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroupassociation",
            name="interface",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interface_redundancy_group_associations",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroupassociation",
            name="interface_redundancy_group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interface_redundancy_group_associations",
                to="dcim.interfaceredundancygroup",
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroup",
            name="interfaces",
            field=models.ManyToManyField(
                blank=True,
                related_name="interface_redundancy_groups",
                through="dcim.InterfaceRedundancyGroupAssociation",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroup",
            name="secrets_group",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="extras.secretsgroup",
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroup",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroup",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="interfaceredundancygroup",
            name="virtual_ip",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interface_redundancy_groups",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="_path",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="dcim.cablepath",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="bridge",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="bridged_interfaces",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="ip_addresses",
            field=models.ManyToManyField(
                blank=True,
                related_name="interfaces",
                through="ipam.IPAddressToInterface",
                to="ipam.ipaddress",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="lag",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="member_interfaces",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="module",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="parent_interface",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="child_interfaces",
                to="dcim.interface",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="role",
            field=nautobot.extras.models.roles.RoleField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="extras.role",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="tagged_vlans",
            field=models.ManyToManyField(
                blank=True, related_name="interfaces_as_tagged", to="ipam.vlan"
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="untagged_vlan",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="interfaces_as_untagged",
                to="ipam.vlan",
            ),
        ),
        migrations.AddField(
            model_name="interface",
            name="vrf",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="interfaces",
                to="ipam.vrf",
            ),
        ),
        migrations.AddField(
            model_name="frontporttemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="frontporttemplate",
            name="module_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.moduletype",
            ),
        ),
        migrations.AddField(
            model_name="frontporttemplate",
            name="rear_port_template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="front_port_templates",
                to="dcim.rearporttemplate",
            ),
        ),
        migrations.AddField(
            model_name="frontport",
            name="_cable_peer_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="frontport",
            name="cable",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="dcim.cable",
            ),
        ),
        migrations.AddField(
            model_name="frontport",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="frontport",
            name="module",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="dcim.module",
            ),
        ),
        migrations.AddField(
            model_name="frontport",
            name="rear_port",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="front_ports",
                to="dcim.rearport",
            ),
        ),
        migrations.AddField(
            model_name="frontport",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="devicetypetosoftwareimagefile",
            name="device_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="software_image_file_mappings",
                to="dcim.devicetype",
            ),
        ),
        migrations.AddField(
            model_name="devicetypetosoftwareimagefile",
            name="software_image_file",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="device_type_mappings",
                to="dcim.softwareimagefile",
            ),
        ),
        migrations.AddField(
            model_name="devicetype",
            name="device_family",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="device_types",
                to="dcim.devicefamily",
            ),
        ),
        migrations.AddField(
            model_name="devicetype",
            name="manufacturer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="device_types",
                to="dcim.manufacturer",
            ),
        ),
        migrations.AddField(
            model_name="devicetype",
            name="software_image_files",
            field=models.ManyToManyField(
                blank=True,
                related_name="device_types",
                through="dcim.DeviceTypeToSoftwareImageFile",
                to="dcim.softwareimagefile",
            ),
        ),
        migrations.AddField(
            model_name="devicetype",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="deviceredundancygroup",
            name="secrets_group",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="device_redundancy_groups",
                to="extras.secretsgroup",
            ),
        ),
        migrations.AddField(
            model_name="deviceredundancygroup",
            name="status",
            field=nautobot.extras.models.statuses.StatusField(
                on_delete=django.db.models.deletion.PROTECT, to="extras.status"
            ),
        ),
        migrations.AddField(
            model_name="deviceredundancygroup",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="devicefamily",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
        migrations.AddField(
            model_name="devicebaytemplate",
            name="device_type",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                on_delete=django.db.models.deletion.CASCADE, to="dcim.devicetype"
            ),
        ),
        migrations.AddField(
            model_name="devicebay",
            name="device",
            field=nautobot.core.models.fields.ForeignKeyWithAutoRelatedName(
                on_delete=django.db.models.deletion.CASCADE, to="dcim.device"
            ),
        ),
        migrations.AddField(
            model_name="devicebay",
            name="installed_device",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="parent_bay",
                to="dcim.device",
            ),
        ),
        migrations.AddField(
            model_name="devicebay",
            name="tags",
            field=nautobot.core.models.fields.TagsField(
                through="extras.TaggedItem", to="extras.Tag"
            ),
        ),
    ]
