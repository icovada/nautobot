# Generated by Django 4.2.16 on 2024-12-04 21:32

import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import nautobot.core.celery.encoders
import nautobot.core.models.fields
import nautobot.core.models.validators
import nautobot.extras.models.customfields
import nautobot.extras.models.groups
import nautobot.extras.models.metadata
import nautobot.extras.models.mixins
import nautobot.extras.models.models
import nautobot.extras.models.relationships
import nautobot.extras.utils
import timezone_field.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="ComputedField",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "key",
                    nautobot.core.models.fields.AutoSlugField(
                        blank=True, max_length=255, populate_from="label", unique=True
                    ),
                ),
                ("grouping", models.CharField(blank=True, max_length=255)),
                ("label", models.CharField(max_length=255)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("template", models.TextField(max_length=500)),
                ("fallback_value", models.CharField(blank=True, max_length=500)),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("advanced_ui", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["weight", "key"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
            managers=[
                ("objects", nautobot.extras.models.customfields.ComputedFieldManager()),
            ],
        ),
        migrations.CreateModel(
            name="ConfigContext",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "owner_object_id",
                    models.UUIDField(blank=True, default=None, null=True),
                ),
                ("weight", models.PositiveSmallIntegerField(default=1000)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "data",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
            ],
            options={
                "ordering": ["weight", "name"],
            },
            bases=(
                nautobot.extras.models.models.ConfigContextSchemaValidationMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ConfigContextSchema",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("data_schema", models.JSONField()),
                (
                    "owner_object_id",
                    models.UUIDField(blank=True, default=None, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("phone", models.CharField(blank=True, db_index=True, max_length=255)),
                ("email", models.EmailField(blank=True, db_index=True, max_length=254)),
                ("address", models.TextField(blank=True)),
                ("comments", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ContactAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("associated_object_id", models.UUIDField(db_index=True)),
            ],
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="CustomField",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("grouping", models.CharField(blank=True, max_length=255)),
                ("type", models.CharField(default="text", max_length=50)),
                ("label", models.CharField(max_length=255)),
                (
                    "key",
                    nautobot.core.models.fields.AutoSlugField(
                        blank=True,
                        max_length=255,
                        populate_from="label",
                        separator="_",
                        unique=True,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
                ("required", models.BooleanField(default=False)),
                ("filter_logic", models.CharField(default="loose", max_length=50)),
                (
                    "default",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("validation_minimum", models.BigIntegerField(blank=True, null=True)),
                ("validation_maximum", models.BigIntegerField(blank=True, null=True)),
                (
                    "validation_regex",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        validators=[
                            nautobot.core.models.validators.ValidRegexValidator()
                        ],
                    ),
                ),
                ("advanced_ui", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["weight", "label"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
            managers=[
                ("objects", nautobot.extras.models.customfields.CustomFieldManager()),
            ],
        ),
        migrations.CreateModel(
            name="CustomFieldChoice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("value", models.CharField(max_length=255)),
                ("weight", models.PositiveSmallIntegerField(default=100)),
            ],
            options={
                "ordering": ["custom_field", "weight", "value"],
            },
        ),
        migrations.CreateModel(
            name="CustomLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("text", models.CharField(max_length=500)),
                ("target_url", models.CharField(max_length=500)),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("group_name", models.CharField(blank=True, max_length=255)),
                ("button_class", models.CharField(default="default", max_length=30)),
                ("new_window", models.BooleanField()),
            ],
            options={
                "ordering": ["group_name", "weight", "name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="DynamicGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                (
                    "group_type",
                    models.CharField(default="dynamic-filter", max_length=16),
                ),
                (
                    "filter",
                    models.JSONField(
                        default=dict,
                        editable=False,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
            ],
            options={
                "ordering": ["content_type", "name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="DynamicGroupMembership",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("operator", models.CharField(max_length=12)),
                ("weight", models.PositiveSmallIntegerField()),
            ],
            options={
                "ordering": ["parent_group", "weight", "group"],
            },
        ),
        migrations.CreateModel(
            name="ExportTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "owner_object_id",
                    models.UUIDField(blank=True, default=None, null=True),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("template_code", models.TextField()),
                ("mime_type", models.CharField(blank=True, max_length=255)),
                ("file_extension", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "ordering": ["content_type", "name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ExternalIntegration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("remote_url", nautobot.core.models.fields.LaxURLField(max_length=500)),
                ("verify_ssl", models.BooleanField(default=True)),
                (
                    "timeout",
                    models.IntegerField(
                        default=30,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("extra_config", models.JSONField(blank=True, null=True)),
                ("http_method", models.CharField(blank=True, max_length=10)),
                (
                    "headers",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("ca_file_path", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="FileAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("bytes", models.BinaryField()),
                ("filename", models.CharField(max_length=255)),
                ("mimetype", models.CharField(max_length=255)),
            ],
            options={
                "ordering": ["filename"],
            },
        ),
        migrations.CreateModel(
            name="FileProxy",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "file",
                    models.FileField(
                        storage=nautobot.extras.models.models._job_storage,
                        upload_to=nautobot.extras.models.models._upload_to,
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "file proxies",
                "ordering": ["name"],
                "get_latest_by": "uploaded_at",
            },
        ),
        migrations.CreateModel(
            name="GitRepository",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "slug",
                    nautobot.core.models.fields.AutoSlugField(
                        blank=True, max_length=255, populate_from="name", unique=True
                    ),
                ),
                (
                    "remote_url",
                    nautobot.core.models.fields.LaxURLField(
                        max_length=255,
                        validators=[
                            nautobot.core.models.validators.EnhancedURLValidator(
                                schemes=["http", "https"]
                            )
                        ],
                    ),
                ),
                ("branch", models.CharField(default="main", max_length=255)),
                (
                    "current_head",
                    models.CharField(blank=True, default="", max_length=48),
                ),
                (
                    "provided_contents",
                    models.JSONField(
                        blank=True,
                        default=list,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
            ],
            options={
                "verbose_name": "Git repository",
                "verbose_name_plural": "Git repositories",
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="GraphQLQuery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("query", models.TextField()),
                (
                    "variables",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
            ],
            options={
                "verbose_name": "GraphQL query",
                "verbose_name_plural": "GraphQL queries",
                "ordering": ("name",),
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="HealthCheckTestModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ImageAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("object_id", models.UUIDField(db_index=True)),
                (
                    "image",
                    models.ImageField(
                        height_field="image_height",
                        upload_to=nautobot.extras.utils.image_upload,
                        width_field="image_width",
                    ),
                ),
                ("image_height", models.PositiveSmallIntegerField()),
                ("image_width", models.PositiveSmallIntegerField()),
                ("name", models.CharField(blank=True, db_index=True, max_length=255)),
                ("created", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                (
                    "module_name",
                    models.CharField(db_index=True, editable=False, max_length=100),
                ),
                (
                    "job_class_name",
                    models.CharField(db_index=True, editable=False, max_length=100),
                ),
                ("grouping", models.CharField(db_index=True, max_length=255)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "installed",
                    models.BooleanField(db_index=True, default=True, editable=False),
                ),
                ("enabled", models.BooleanField(default=False)),
                (
                    "is_job_hook_receiver",
                    models.BooleanField(default=False, editable=False),
                ),
                (
                    "is_job_button_receiver",
                    models.BooleanField(default=False, editable=False),
                ),
                ("has_sensitive_variables", models.BooleanField(default=True)),
                ("approval_required", models.BooleanField(default=False)),
                ("hidden", models.BooleanField(db_index=True, default=False)),
                ("dryrun_default", models.BooleanField(default=False)),
                ("read_only", models.BooleanField(default=False, editable=False)),
                (
                    "soft_time_limit",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "time_limit",
                    models.FloatField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "task_queues",
                    nautobot.core.models.fields.JSONArrayField(
                        base_field=models.CharField(blank=True, max_length=255),
                        blank=True,
                        default=list,
                    ),
                ),
                ("supports_dryrun", models.BooleanField(default=False, editable=False)),
                ("grouping_override", models.BooleanField(default=False)),
                ("name_override", models.BooleanField(default=False)),
                ("description_override", models.BooleanField(default=False)),
                ("approval_required_override", models.BooleanField(default=False)),
                ("dryrun_default_override", models.BooleanField(default=False)),
                ("hidden_override", models.BooleanField(default=False)),
                ("soft_time_limit_override", models.BooleanField(default=False)),
                ("time_limit_override", models.BooleanField(default=False)),
                (
                    "has_sensitive_variables_override",
                    models.BooleanField(default=False),
                ),
                ("task_queues_override", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["grouping", "name"],
                "managed": True,
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="JobButton",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("enabled", models.BooleanField(default=True)),
                ("text", models.CharField(max_length=500)),
                ("weight", models.PositiveSmallIntegerField(default=100)),
                ("group_name", models.CharField(blank=True, max_length=255)),
                ("button_class", models.CharField(default="default", max_length=30)),
                ("confirmation", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["group_name", "weight", "name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="JobHook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("type_create", models.BooleanField(default=False)),
                ("type_delete", models.BooleanField(default=False)),
                ("type_update", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("name",),
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="JobLogEntry",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "log_level",
                    models.CharField(db_index=True, default="info", max_length=32),
                ),
                ("grouping", models.CharField(default="main", max_length=100)),
                ("message", models.TextField(blank=True)),
                ("created", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "log_object",
                    models.CharField(blank=True, default="", max_length=200),
                ),
                (
                    "absolute_url",
                    models.CharField(blank=True, default="", max_length=255),
                ),
            ],
            options={
                "verbose_name_plural": "job log entries",
                "ordering": ["created"],
                "get_latest_by": "created",
            },
        ),
        migrations.CreateModel(
            name="JobResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255)),
                (
                    "task_name",
                    models.CharField(db_index=True, max_length=255, null=True),
                ),
                (
                    "date_created",
                    models.DateTimeField(auto_now_add=True, db_index=True),
                ),
                (
                    "date_done",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "status",
                    models.CharField(db_index=True, default="PENDING", max_length=30),
                ),
                (
                    "result",
                    models.JSONField(
                        blank=True,
                        editable=False,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                        null=True,
                    ),
                ),
                ("worker", models.CharField(default=None, max_length=100, null=True)),
                (
                    "task_args",
                    models.JSONField(
                        blank=True,
                        default=list,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                    ),
                ),
                (
                    "task_kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                    ),
                ),
                (
                    "celery_kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                    ),
                ),
                ("traceback", models.TextField(blank=True, null=True)),
                ("meta", models.JSONField(default=None, editable=False, null=True)),
            ],
            options={
                "ordering": ["-date_created"],
                "get_latest_by": "date_created",
            },
        ),
        migrations.CreateModel(
            name="MetadataChoice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("value", models.CharField(max_length=255)),
                ("weight", models.PositiveSmallIntegerField(default=100)),
            ],
            options={
                "ordering": ["metadata_type", "weight", "value"],
            },
        ),
        migrations.CreateModel(
            name="MetadataType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("data_type", models.CharField(max_length=50)),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
            managers=[
                ("objects", nautobot.extras.models.metadata.MetadataTypeManager()),
            ],
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("assigned_object_id", models.UUIDField(db_index=True)),
                ("user_name", models.CharField(editable=False, max_length=150)),
                ("note", models.TextField()),
            ],
            options={
                "ordering": ["created"],
            },
        ),
        migrations.CreateModel(
            name="ObjectChange",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("time", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "user_name",
                    models.CharField(db_index=True, editable=False, max_length=150),
                ),
                ("request_id", models.UUIDField(db_index=True, editable=False)),
                ("action", models.CharField(max_length=50)),
                ("changed_object_id", models.UUIDField(db_index=True)),
                (
                    "change_context",
                    models.CharField(db_index=True, editable=False, max_length=50),
                ),
                (
                    "change_context_detail",
                    models.CharField(blank=True, editable=False, max_length=400),
                ),
                ("related_object_id", models.UUIDField(blank=True, null=True)),
                ("object_repr", models.CharField(editable=False, max_length=200)),
                (
                    "object_data",
                    models.JSONField(
                        editable=False,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                (
                    "object_data_v2",
                    models.JSONField(
                        blank=True,
                        editable=False,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-time"],
                "get_latest_by": "time",
            },
        ),
        migrations.CreateModel(
            name="ObjectMetadata",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "scoped_fields",
                    nautobot.core.models.fields.JSONArrayField(
                        base_field=models.CharField(max_length=255), blank=True
                    ),
                ),
                ("_value", models.JSONField(blank=True, null=True)),
                ("assigned_object_id", models.UUIDField(db_index=True)),
            ],
            options={
                "verbose_name_plural": "object metadata",
                "ordering": ["metadata_type"],
            },
            managers=[
                ("objects", nautobot.extras.models.metadata.ObjectMetadataManager()),
            ],
        ),
        migrations.CreateModel(
            name="Relationship",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("label", models.CharField(max_length=255, unique=True)),
                (
                    "key",
                    nautobot.core.models.fields.AutoSlugField(
                        blank=True, max_length=255, populate_from="label", unique=True
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
                ("type", models.CharField(default="many-to-many", max_length=50)),
                (
                    "required_on",
                    models.CharField(blank=True, default="", max_length=12),
                ),
                ("source_label", models.CharField(blank=True, max_length=255)),
                ("source_hidden", models.BooleanField(default=False)),
                (
                    "source_filter",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("destination_label", models.CharField(blank=True, max_length=255)),
                ("destination_hidden", models.BooleanField(default=False)),
                (
                    "destination_filter",
                    models.JSONField(
                        blank=True,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("advanced_ui", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["label"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
            managers=[
                ("objects", nautobot.extras.models.relationships.RelationshipManager()),
            ],
        ),
        migrations.CreateModel(
            name="RelationshipAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("source_id", models.UUIDField(db_index=True)),
                ("destination_id", models.UUIDField(db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "color",
                    nautobot.core.models.fields.ColorField(
                        default="9e9e9e", max_length=6
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
                ("weight", models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                "ordering": ("weight", "name"),
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SavedView",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=255)),
                ("view", models.CharField(max_length=255)),
                (
                    "config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("is_global_default", models.BooleanField(default=False)),
                ("is_shared", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "saved view",
                "verbose_name_plural": "saved views",
                "ordering": ["owner", "view", "name"],
            },
        ),
        migrations.CreateModel(
            name="ScheduledJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("task", models.CharField(db_index=True, max_length=201)),
                ("interval", models.CharField(max_length=255)),
                (
                    "args",
                    models.JSONField(
                        blank=True,
                        default=list,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                    ),
                ),
                (
                    "kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                    ),
                ),
                (
                    "celery_kwargs",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=nautobot.core.celery.encoders.NautobotKombuJSONEncoder,
                    ),
                ),
                (
                    "queue",
                    models.CharField(
                        blank=True, db_index=True, default="", max_length=255
                    ),
                ),
                ("one_off", models.BooleanField(default=False)),
                ("start_time", models.DateTimeField()),
                (
                    "time_zone",
                    timezone_field.fields.TimeZoneField(
                        default=django.utils.timezone.get_default_timezone_name
                    ),
                ),
                ("enabled", models.BooleanField(default=True)),
                (
                    "last_run_at",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                (
                    "total_run_count",
                    models.PositiveIntegerField(default=0, editable=False),
                ),
                ("date_changed", models.DateTimeField(auto_now=True)),
                ("description", models.TextField(blank=True)),
                ("approval_required", models.BooleanField(default=False)),
                (
                    "approved_at",
                    models.DateTimeField(blank=True, editable=False, null=True),
                ),
                ("crontab", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ScheduledJobs",
            fields=[
                (
                    "ident",
                    models.SmallIntegerField(
                        default=1, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("last_update", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Secret",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
                ("provider", models.CharField(max_length=255)),
                (
                    "parameters",
                    models.JSONField(
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SecretsGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("description", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "abstract": False,
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="SecretsGroupAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("access_type", models.CharField(max_length=32)),
                ("secret_type", models.CharField(max_length=32)),
            ],
            options={
                "ordering": ("secrets_group", "access_type", "secret_type"),
            },
        ),
        migrations.CreateModel(
            name="StaticGroupAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("associated_object_id", models.UUIDField(db_index=True)),
            ],
            options={
                "ordering": [
                    "dynamic_group",
                    "associated_object_type",
                    "associated_object_id",
                ],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
            managers=[
                (
                    "objects",
                    nautobot.extras.models.groups.StaticGroupAssociationDefaultManager(),
                ),
                (
                    "all_objects",
                    nautobot.extras.models.groups.StaticGroupAssociationManager(),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "color",
                    nautobot.core.models.fields.ColorField(
                        default="9e9e9e", max_length=6
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "verbose_name_plural": "statuses",
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "color",
                    nautobot.core.models.fields.ColorField(
                        default="9e9e9e", max_length=6
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "ordering": ["name"],
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="TaggedItem",
            fields=[
                ("object_id", models.UUIDField(db_index=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("phone", models.CharField(blank=True, db_index=True, max_length=255)),
                ("email", models.EmailField(blank=True, db_index=True, max_length=254)),
                ("address", models.TextField(blank=True)),
                ("comments", models.TextField(blank=True)),
            ],
            options={
                "ordering": ("name",),
                "abstract": False,
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="Webhook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("type_create", models.BooleanField(default=False)),
                ("type_update", models.BooleanField(default=False)),
                ("type_delete", models.BooleanField(default=False)),
                ("payload_url", models.CharField(max_length=500)),
                ("enabled", models.BooleanField(default=True)),
                ("http_method", models.CharField(default="POST", max_length=30)),
                (
                    "http_content_type",
                    models.CharField(default="application/json", max_length=255),
                ),
                ("additional_headers", models.TextField(blank=True)),
                ("body_template", models.TextField(blank=True)),
                ("secret", models.CharField(blank=True, max_length=255)),
                ("ssl_verification", models.BooleanField(default=True)),
                (
                    "ca_file_path",
                    models.CharField(blank=True, default="", max_length=4096),
                ),
                (
                    "content_types",
                    models.ManyToManyField(
                        limit_choices_to=nautobot.extras.utils.FeatureQuery("webhooks"),
                        related_name="webhooks",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
            bases=(
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="UserSavedViewAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("view_name", models.CharField(max_length=255)),
                (
                    "saved_view",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_assignments",
                        to="extras.savedview",
                    ),
                ),
            ],
        ),
    ]
