# Generated by Django 4.2.16 on 2024-12-04 21:32

from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.models
import nautobot.extras.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("tenancy", "0001_initial"),
        ("virtualization", "0001_initial"),
        ("dcim", "0004_initial"),
        ("extras", "0002_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.AddField(
            model_name="configcontext",
            name="cluster_groups",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="virtualization.clustergroup"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="clusters",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="virtualization.cluster"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="config_context_schema",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="config_contexts",
                to="extras.configcontextschema",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="device_redundancy_groups",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="dcim.deviceredundancygroup"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="device_types",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="dcim.devicetype"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="dynamic_groups",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to=nautobot.extras.models.models.limit_dynamic_group_choices,
                related_name="+",
                to="extras.dynamicgroup",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="locations",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="dcim.location"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="owner_content_type",
            field=models.ForeignKey(
                blank=True,
                default=None,
                limit_choices_to=nautobot.extras.utils.FeatureQuery(
                    "config_context_owners"
                ),
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="config_contexts",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="platforms",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="dcim.platform"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="roles",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="extras.role"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="tags",
            field=models.ManyToManyField(blank=True, related_name="+", to="extras.tag"),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="tenant_groups",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="tenancy.tenantgroup"
            ),
        ),
        migrations.AddField(
            model_name="configcontext",
            name="tenants",
            field=models.ManyToManyField(
                blank=True, related_name="+", to="tenancy.tenant"
            ),
        ),
        migrations.AddField(
            model_name="computedfield",
            name="content_type",
            field=models.ForeignKey(
                limit_choices_to=nautobot.extras.utils.FeatureQuery("custom_fields"),
                on_delete=django.db.models.deletion.CASCADE,
                related_name="computed_fields",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="usersavedviewassociation",
            unique_together={("user", "view_name")},
        ),
        migrations.AlterUniqueTogether(
            name="team",
            unique_together={("name", "phone", "email")},
        ),
        migrations.AlterUniqueTogether(
            name="taggeditem",
            unique_together={("content_type", "object_id", "tag")},
        ),
        migrations.AlterIndexTogether(
            name="taggeditem",
            index_together={("content_type", "object_id")},
        ),
        migrations.AddIndex(
            model_name="staticgroupassociation",
            index=models.Index(
                fields=["dynamic_group", "associated_object_id"],
                name="extras_sga_double",
            ),
        ),
        migrations.AddIndex(
            model_name="staticgroupassociation",
            index=models.Index(
                fields=["associated_object_type_id", "associated_object_id"],
                name="extras_sga_associated_object",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="staticgroupassociation",
            unique_together={
                ("dynamic_group", "associated_object_type", "associated_object_id")
            },
        ),
        migrations.AlterUniqueTogether(
            name="secretsgroupassociation",
            unique_together={("secrets_group", "access_type", "secret_type")},
        ),
        migrations.AlterUniqueTogether(
            name="savedview",
            unique_together={("owner", "name", "view")},
        ),
        migrations.AlterUniqueTogether(
            name="relationshipassociation",
            unique_together={
                (
                    "relationship",
                    "source_type",
                    "source_id",
                    "destination_type",
                    "destination_id",
                )
            },
        ),
        migrations.AddIndex(
            model_name="objectmetadata",
            index=models.Index(
                fields=["assigned_object_type", "assigned_object_id"],
                name="assigned_object",
            ),
        ),
        migrations.AddIndex(
            model_name="objectmetadata",
            index=models.Index(
                fields=["assigned_object_type", "assigned_object_id", "contact"],
                name="assigned_object_contact",
            ),
        ),
        migrations.AddIndex(
            model_name="objectmetadata",
            index=models.Index(
                fields=["assigned_object_type", "assigned_object_id", "team"],
                name="assigned_object_team",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["request_id", "changed_object_type_id", "changed_object_id"],
                name="extras_objectchange_triple_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["request_id", "changed_object_type_id"],
                name="extras_objectchange_double_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(fields=["-time"], name="extras_objectchange_rtime_idx"),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["changed_object_type", "changed_object_id"],
                name="changed_object_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["related_object_type", "related_object_id"],
                name="related_object_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["user", "changed_object_type", "changed_object_id"],
                name="user_changed_object_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="objectchange",
            index=models.Index(
                fields=["user_name", "changed_object_type", "changed_object_id"],
                name="user_name_changed_object_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="objectchange",
            unique_together={
                ("time", "request_id", "changed_object_type", "changed_object_id")
            },
        ),
        migrations.AlterUniqueTogether(
            name="note",
            unique_together={
                ("assigned_object_type", "assigned_object_id", "user_name", "created")
            },
        ),
        migrations.AlterUniqueTogether(
            name="metadatachoice",
            unique_together={("metadata_type", "value")},
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(
                fields=["-date_created"], name="extras_jobresult_rcreated_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(fields=["-date_done"], name="extras_jr_rdone_idx"),
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(
                fields=["status", "-date_created"], name="extras_jr_statrcreate_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="jobresult",
            index=models.Index(
                fields=["status", "-date_done"], name="extras_jr_statrdone_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="job",
            unique_together={("module_name", "job_class_name")},
        ),
        migrations.AlterUniqueTogether(
            name="exporttemplate",
            unique_together={("content_type", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="dynamicgroupmembership",
            unique_together={("group", "parent_group", "operator", "weight")},
        ),
        migrations.AlterUniqueTogether(
            name="customfieldchoice",
            unique_together={("custom_field", "value")},
        ),
        migrations.AlterUniqueTogether(
            name="contactassociation",
            unique_together={
                ("team", "associated_object_type", "associated_object_id", "role"),
                ("contact", "associated_object_type", "associated_object_id", "role"),
            },
        ),
        migrations.AlterUniqueTogether(
            name="contact",
            unique_together={("name", "phone", "email")},
        ),
        migrations.AlterUniqueTogether(
            name="computedfield",
            unique_together={("content_type", "label")},
        ),
    ]
